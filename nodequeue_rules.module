<?php

/**
 * @file
 *
 * @see nodequeue_rules.rules.inc
 */


function nodequeue_subqueue_add_top($queue, &$subqueue, $nid = NULL) {
  if (!empty($nid)) {
    $transaction = db_transaction();
    try {
      $position = db_query("SELECT MAX(position) + 1 FROM (SELECT * FROM {nodequeue_nodes} WHERE sqid = :sqid) as nn", array(':sqid' => $subqueue->sqid))->fetchField();
      $position = !empty($position) ? $position : 1;
      //$position = 0;
      db_query("INSERT INTO {nodequeue_nodes} (sqid, name, nid, position, timestamp) VALUES (:sqid, :name, :nid, :position, :time)", array(':sqid' => $subqueue->sqid, ':name' => $queue->name, ':nid' => $nid, ':position' => $position,':time' => REQUEST_TIME));
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('nodequeue', $e);

      throw $e;
    }
    $subqueue->count = db_query("SELECT COUNT(nid) FROM {nodequeue_nodes} WHERE sqid = :sqid", array(':sqid' => $subqueue->sqid))->fetchField();
    // If adding this would make the queue too big, pop the front node
    // (or nodes) out.
    if (!empty($queue->size)) {
      // 0 means infinity so never do this if FALSE.
      nodequeue_check_subqueue_size($queue, $subqueue, $queue->size);
    }

    // Get position of current added node
    $current_position = nodequeue_get_subqueue_position($subqueue->sqid, $nid);

    // Move the current node to postion top
    if($current_position != 1) {
      nodequeue_queue_front($subqueue,$current_position);
    }
    if (module_exists('apachesolr')) {
      apachesolr_mark_entity('node', $nid);
    }
    // Invoke the hook to notify other modules of the node addition.
    module_invoke_all('nodequeue_add', $subqueue->sqid, $nid);
  }
}